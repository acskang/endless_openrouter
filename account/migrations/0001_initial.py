# Generated by Django 5.2 on 2025-08-05 03:55

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='이메일')),
                ('nickname', models.CharField(blank=True, max_length=30, verbose_name='닉네임')),
                ('bio', models.TextField(blank=True, verbose_name='자기소개')),
                ('phone', models.CharField(blank=True, max_length=17, validators=[django.core.validators.RegexValidator(message="전화번호는 '+999999999' 형식으로 입력해주세요. 최대 15자리까지 허용됩니다.", regex='^\\+?1?\\d{9,15}$')], verbose_name='전화번호')),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='profile/%Y/%m/', verbose_name='프로필 이미지')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='생년월일')),
                ('is_verified', models.BooleanField(default=False, verbose_name='인증된 사용자')),
                ('is_premium', models.BooleanField(default=False, verbose_name='프리미엄 사용자')),
                ('api_key', models.CharField(blank=True, max_length=100, null=True, unique=True, verbose_name='API 키')),
                ('api_calls_limit', models.IntegerField(default=1000, verbose_name='API 호출 제한')),
                ('api_calls_count', models.IntegerField(default=0, verbose_name='API 호출 횟수')),
                ('api_calls_reset_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='API 호출 횟수 리셋 날짜')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='생성일')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='수정일')),
                ('last_api_call', models.DateTimeField(blank=True, null=True, verbose_name='마지막 API 호출')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '사용자',
                'verbose_name_plural': '사용자들',
                'db_table': 'users',
                'indexes': [models.Index(fields=['email'], name='users_email_4b85f2_idx'), models.Index(fields=['api_key'], name='users_api_key_6038b9_idx'), models.Index(fields=['created_at'], name='users_created_6541e9_idx')],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
